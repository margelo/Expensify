name: E2E Performance Tests

on:
  workflow_call:
    inputs:
      PR_NUMBER:
        description: A PR number to run performance tests against. If the PR is already merged, the merge commit will be used. If not, the PR will be merged locally before running the performance tests.
        type: string
        required: true

  workflow_dispatch:
    inputs:
      PR_NUMBER:
        description: A PR number to run performance tests against. If the PR is already merged, the merge commit will be used. If not, the PR will be merged locally before running the performance tests.
        type: string
        required: true

jobs:
  runTestsInAWS:
    runs-on: ubuntu-latest
    needs: [buildBaseline, buildDelta]
    name: Run E2E tests in AWS device farm
    steps:
      - uses: actions/checkout@v3

      - name: Make zip directory for everything to send to AWS Device Farm
        run: mkdir zip

      - name: Copy e2e code into zip folder
        run: cp -r tests/e2e zip

      - name: Zip everything in the zip directory up
        run: zip -qr App.zip ./zip

      - name: Configure AWS Credentials
        uses: margelo/expensify-app-fork/.github/actions/composite/configureAwsCredentials@main
        with:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: us-west-2

      - name: Schedule AWS Device Farm test run
        uses: realm/aws-devicefarm/test-application@7b9a91236c456c97e28d384c9e476035d5ea686b
        with:
          name: App E2E Performance Regression Tests
          project_arn: ${{ secrets.AWS_PROJECT_ARN }}
          device_pool_arn: ${{ secrets.AWS_DEVICE_POOL_ARN }}
          app_file: zip/app-e2eRelease-baseline.apk
          app_type: ANDROID_APP
          test_type: APPIUM_NODE
          test_package_file: App.zip
          test_package_type: APPIUM_NODE_TEST_PACKAGE
          test_spec_file: tests/e2e/TestSpec.yml
          test_spec_type: APPIUM_NODE_TEST_SPEC
          remote_src: false
          file_artifacts: Customer Artifacts.zip
          cleanup: true

      - name: Unzip AWS Device Farm results
        if: ${{ always() }}
        run: unzip "Customer Artifacts.zip"

      - name: Print AWS Device Farm run results
        if: ${{ always() }}
        run: cat "./Host_Machine_Files/\$WORKING_DIRECTORY/output.md"

      - name: Print AWS Device Farm verbose run results
        if: ${{ always() && runner.debug != null && fromJSON(runner.debug) }}
        run: cat "./Host_Machine_Files/\$WORKING_DIRECTORY/debug.log"
# TODO: Once tests are more reliable we should uncomment this
#      - name: Check if test failed, if so post the results and add the DeployBlocker label
#        run: |
#          if grep -q 'ðŸ”´' ./Host_Machine_Files/\$WORKING_DIRECTORY/output.md; then
#            gh pr edit ${{ inputs.PR_NUMBER }} --add-label DeployBlockerCash
#            gh pr comment ${{ inputs.PR_NUMBER }} -F ./Host_Machine_Files/\$WORKING_DIRECTORY/output.md
#            gh pr comment ${{ inputs.PR_NUMBER }} -b "@Expensify/mobile-deployers ðŸ“£ Please look into this performance regression as it's a deploy blocker."
#          else
#            echo 'âœ… no performance regression detected'
#          fi
#        env:
#          GITHUB_TOKEN: ${{ github.token }}
